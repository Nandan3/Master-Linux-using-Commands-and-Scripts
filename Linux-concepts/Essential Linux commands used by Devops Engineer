General commands:
		1. $ls -lta        #Long format, Hidden files, with time of creation
		
		2. Set an environment and path variables
		• $export VAR_NAME=value   # Temporary
		• export PATH=$PATH:/opt/myapp/bin   # Temporary
	
		Add variable details in:
		~/.bashrc or ~/.bash_profile    #permanent
	
		Eg: 
		export JAVA_HOME=/usr/lib/jvm/java-11
		export PATH=$PATH:/usr/local/node/bin
	
		Run:
		$source ~/.bashrc or ~/.bash_profile
	
		3. $cat /etc/os-release      # to check the os-version
	
Working with Files:
		1. Search Files by Name/Type/Size:
		• $find /var -name "*.log"   
		• $find /home -type f -size +10M
		• $find /lib64/ -size +10M        #to filter out the large files
	
		2. $locate <filename>      #Gives all path with keyword
		
		3. $du -sh <filename>        #view the file size in human readable format in MB
		or
		$ls -lh <filename>
	
		4. $tar -cf <archive_filename> <list_of_files_to_be_archived>    #Zip or Archiving a file
			ü Instead of -cf can use >> --create, --file
		
		5. Search Text in Files:
		• $grep -i "warning" logfile.log      #Search Text in Files
		• $grep -r <search text> <directory_path>   #when you don't know which file contains the content
		• $grep -A 10 <search text> <filename>      #print the line, which matches the pattern & 10 lines after that
		Use '-B' >> before the lines
		• $grep -oi 'password' /etc/ssh/sshd-config   #print only the matched part (not the whole line)
	
		6. Advanced search instructions: (Uses mostly in Shell scripts)
		• ^ >> search, which is starts from
		Eg: $grep '^error' logfile.txt
	
		• $ >> search, which is ends from
		Eg: $grep '\.log$' logfile.txt
	
		• . >> search in between characters
		Eg: $grep -r 'c.t' /etc/   #search which is starts with 'c' & ends with 't'
	
		• * >> matches the pattern
		Eg: $grep -r 'let*' /etc/     #matches which starts with 'let'
		$grep -r '/.*/' /etc/     #matches which begins with '/', has 0 or more character in between, ends with '/'
	
		• E >> extended grep 
		Eg: $grep -E '[0-9]{3}' logfile.txt    #Match 3-digit numbers
		Or $egrep -r '[0-9]{3}' logfile.txt
		$egrep -r '0{3,}' /etc/    #occurance of atleast 3 zero's
	
		• ? >> Matches the preceding character or group 0 or 1 time
		Eg: $egrep -r 'disabled?' /etc/ 
	
		• [] >> range or sets
		Eg: $egrep -r 'c[au]t' /etc/      #So it matches cat or cut
		
		7. 'awk' command: Processes files line by line and splits each line into fields (columns).
			ü You can search, filter, and format text
		Eg: $awk '/error/ {print}' logfile.txt   #Prints only lines containing the word "error".
		
		8. Changing contents of the file:
		• $sed -i 's/canda/canada/g' userfile.txt   #replace canda with canada
		• $cut -d ' ' -f 1 <file_name>   #extract the 1st field from the file
		• $cut -d ',' -f 1,3 userfile.txt    #Extract multiple fields i.e 1st and 3rd field
		
		9. If you want to remove all duplicates, sort the file first:
		Eg: $sort userfile.txt | uniq
			ü 'uniq' command → Removes consecutive duplicate lines from a file or input.
			
		10. Three ways to change the file permission:
		• $sudo chmod 777 <file_name>  #full permission to users, groups, others
		• $sudo chmod o+rwx <file_name>   #read, write, execute permission to other and rest is 'Nil'
		• $sudo chown owner:group <filename>    #change the ownership of the group
		Eg: $sudo chown Teju:developer test-file
		• $chgrp <group_name> test-file    #change the group for the test-file
		Eg: $chgrp android test-file 
		
Package Management:
	
	§ Debian systems: (APT - most advanced)
	
	• $apt update	#Update the package list
		#Good to run after installation os or new sources
	• $apt upgrade	#Upgrades all the installed packages
	• $apt -f install	#Fix the broken dependencies
	• $apt edit-sources	#To update the repositories 
		#This opens /etc/apt/sources.list file
	• $apt remove vlc	#Remove package
	• $apt purge vlc	#Remove package with config files
	• $apt autoremove	#Clean up unused packages
	• $apt search telnet	#Search a pakcage
	• $apt list | grep telent	#List installed packages
	
	§ Red-hat based system: (YUM - most advanced)
	
	• $yum update	#Update all installed packages
	• $yum install -y httpd	#Install the packages
	• $yum remove httpd	#Remove the packages
	• $yum repolist	#Show all the repos added to your system (to check software repo)
	• $yum provides <command-name>	#Provides command belong to which package
	
	DNF: (Next gen replacement for YUM)
		1. $dnf install nginx 
		2. $dnf update 
		3. $dnf search docker
		
Network troubleshooting steps
			
	§ Troubleshooting Steps:
		○ Check interface status → ip addr, ip link
		○ Ping gateway → ping 192.168.1.1
		○ Check DNS → cat /etc/resolv.conf, dig google.com
		○ Check routes → ip route
		○ Verify firewall → iptables -L or firewalld-cmd --list-all
		○ Use tcpdump or ss to debug traffic
		○ Check if we can resolve the host name to ip addr
			$nslookup hostname
		○ Shows the number of hosts b/w source & server → $traceroute <host_ip_addr>
		
	§ Steps for 'Connection timeout error':
		○ Issue with local interface not being connected to the network
		○ Your host not resolving ip addr of the host name
		○ Issue with the route to the server
		○ Issue with the server itself
		
Troubleshooting storage related issues:
	
	§ Memory:
		1. $df -h      #Show mounted FS usage & To check the memory
		2. $free -m (-k, -g)      #display current memory usage by the OS
		Or $free -h
		3. $top or $htop         #Real-time view of system processes, CPU, memory usage.
		
Security in Linux:
		1. Access control: Username & Password
		2. PAM (Pluggable Authentication Module)
			§ Used to authenticate users to programs & services in linux
		3. Network Security: restrict access to services listening on the linux server
		Eg: $iptables, $firwalld etc
		4. Secure Shell (ssh) hardening: make sure the only authorized user gain access to server
		5. SELinux: make use of security policies for isolating application running on the same system from each other
	
	
	
	
	
	
		
		
		
	
	
	
	
	
	
	
 
