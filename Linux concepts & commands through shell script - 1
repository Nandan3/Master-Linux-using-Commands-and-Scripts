○ Learn the Linux concepts & commands through shell script:

Task 1: How to install git software in multiple flavors (Linux, MacOS, windows) of OS?

Concepts covered:

§ Variables:
	1. A variable in Linux is a name that stores a value (string, number, or command output) in memory, so you can use it later in scripts or the shell.
	Syntax: VAR_NAME=value
	
	§ Types:
	
	○ Environment and PATH variables:
		1. $export VAR_NAME=value   # Temporary 
		2. Permanent set up: (even after reboot)
		~/.bashrc or ~/.bash_profile
		Add:
		export JAVA_HOME=/usr/lib/jvm/java-11
		export PATH=$PATH:$JAVA_HOME/bin
	
		$source ~/.bashrc or ~/.bash_profile
		
	○ Positional Parameters (Script Variables):
		1. Represent arguments passed to a script.
		Eg: (demo.sh)
		#!/bin/bash
		echo "First argument: $1"
		echo "Second argument: $2"
		
		$./demo.sh Learning Linux
		
	○ Special Variables:
		1. $0 → Script name
		2. $1, $2, … → Arguments
		3. $# → Number of arguments
		4. $? → Exit status of last command
		5. $$ → Process ID of the current shell
		6. $USER → Current logged-in user
		
		
§ Package management:
	1. It is a compressed archive that contains all the files that are required to run the software.
	
	○ Package management family:
		1. Debian / Ubuntu (.deb) >> $dpkg, $apt, $apt-get
		2. Red-hat / CentOS (.rpm) >> $rpm, $yum, $dnf
		3. Arch Linux (.pkg, .tar, .zst) >> $paceman
		4. SUSE / OpenSUSE (.rpm) >> $zypper
		
	○ Repositories of the Package manager:
		1. /etc/apt/sources.list   >> default repo's
		2. /etc/apt/sources.list.d/ubuntu-sources
	

§ Conditional statements in  Linux:

○ if condition:
Syntax:
	if [ condition ]; then
	    # commands if condition is true
	else
	    # commands if condition is false
	fi

○ Operators You Can Use in Conditions:

Numeric Comparisons:
	1. -eq → equal
	2. -ne → not equal
	3. -gt → greater than
	4. -lt → less than
	5. -ge → greater than or equal
	6. -le → less than or equal
	
	Eg:
	if [ $a -eq $b ]; then
	    echo "a equals b"
	fi
	
String Comparisons:
	1. = → equal
	2. != → not equal
	3. -z → string is empty
	4. -n → string is not empty
	
	Eg:
	if [ -z "$name" ]; then
	    echo "Name is empty"
	fi
	
File Checks:
	1. -e file → file exists
	2. -f file → file exists and is a regular file
	3. -d dir → directory exists
	4. -r file → readable
	5. -w file → writable
	6. -x file → executable
	
	Eg:
	if [ -f /etc/passwd ]; then
	    echo "passwd file exists"
	fi


Check below script:
#!/bin/bash
echo "script to install git"

if [ $(uname) == "Linux" ]; then
  echo "this is linux box, installing git"
  yum install git -y

elif [ $(uname) == "Darwin" ]; then
  echo "this is MacOS"
  brew install git

else
  echo "not installing"
fi


